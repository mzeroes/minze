fastlane_require 'dotenv'
fastlane_require 'spaceship'
release_notes_command = "git log HEAD --pretty=format:\"%s\" -1"

# Check Git Status

lane :check_git_status do |options|
  ensure_git_branch(
    branch: "#{options[:name]}"
  )
  ensure_git_status_clean
  git_pull

end

lane :set_build_to_current_timestamp do |options|
  incremented_build_number = Time.now.to_i.to_s
  `sed -i -e "s#.*IOS_VERSION_BUILD_NUMBER=.*#IOS_VERSION_BUILD_NUMBER='#{incremented_build_number}'#g" .env`
  `sed -i -e "s#.*ANDROID_VERSION_CODE=.*#ANDROID_VERSION_CODE='#{incremented_build_number}'#g" .env`
  ENV['IOS_VERSION_BUILD_NUMBER'] = incremented_build_number
  ENV['ANDROID_VERSION_CODE'] = incremented_build_number
end

# JS Environments

# lane :set_js_env do |options|
# end

before_all do |lane, options|
  Dotenv.load(".env")
  Dotenv.load(".env.secret")
end

after_all do |lane, options|
end

error do |lane, exception, options|
end


#  ANDROID

platform :android do
  lane :restore_files do |options|
    # do some restore_files
  end

  error do |lane, exception, options|
    restore_files
  end


  lane :install_debug do |options|
    gradle(
      task: "installDebug",
      project_dir: ENV['ANDROID_PROJECT_DIR']
    )
    restore_files
  end

  lane :install_release do |options|
    gradle(
      task: "installRelease",
      project_dir: ENV['ANDROID_PROJECT_DIR']
    )
    restore_files
  end

  lane :build do |options|
    gradle(
      task: "assembleRelease",
      project_dir: ENV['ANDROID_PROJECT_DIR']
    )
    restore_files
  end

  lane :deploy_to_appcenter do |options|
    appcenter_upload(
      api_token: ENV['FL_APPCENTER_API_TOKEN'],
      owner_name: ENV['APPCENTER_USERNAME'],
      app_name: ENV['ANDROID_APPCENTER_APP_ID'],
      apk: ENV['ANDROID_APK_PATH'],
      release_notes: %x[#{release_notes_command}]
    )
  end

  lane :deploy_to_playstore do |options|
    supply(
      package_name: ENV['GRADLE_APP_IDENTIFIER'],
      track: 'internal',
      apk: ENV['ANDROID_APK_PATH'],
      json_key: ENV['ANDROID_PLAYSTORE_JSON_KEY_PATH'],
    )
  end

  lane :deploy do |options|
    if options[:codepush] then
      release_notes = %x[#{release_notes_command}]
      sh "cd .. && appcenter codepush release-react -d #{ENV['ANDROID_CODEPUSH_DEPLOYMENT_NAME']} -a #{ENV['APPCENTER_USERNAME']}/#{ENV['ANDROID_APPCENTER_APP_ID']} --target-binary-version \"#{ENV['ANDROID_VERSION_NAME']}\" --description \"#{release_notes}\" --disable-duplicate-release-error"
    else
      build
      if ENV['DEPLOYMENT_PLATFORM'] === 'appcenter' then
        deploy_to_appcenter
      elsif ENV['DEPLOYMENT_PLATFORM'] === 'appstore' then
        deploy_to_playstore
      end
    end
  end

  lane :deploy_local do |options|
    check_git_status(name: ENV['REPO_GIT_BRANCH'])
    deploy
  end
end
